//username go exercises
//m.h.verdian

// variable

/*
package main

import "fmt"

func main() {
	// (var) : only used inside and outside  function

	var a = "hello world"
	fmt.Println(a)
	//hello world
	var b, c int = 1, 2
	fmt.Println(b, c)
	//1 2
	var d = true
	fmt.Println(d)
	// true

	// (:=) : only used inside function

	f := "apple"
	fmt.Println(f)
	//apple

	var a1 string
	var b1 int
	var c1 bool

	fmt.Println(a1)
	//""
	fmt.Println(b1)
	//0
	fmt.Println(c1)
	//false

	c1 = true
	fmt.Println(c1)
	//true

}
*/

//data types

/*
package main

import (
	"fmt"
	"reflect"
)

func main() {
	//This is computed as const uintSize = 32 << (^uint(0) >> 32 & 1) // 32 or 64

	var a int
	fmt.Printf("a's type is %s\n", reflect.TypeOf(a))

	b := 2
	fmt.Printf("b's typs is %s\n", reflect.TypeOf(b))

	//string  ""
	//int     -0+
	//uint     0+
	//bool    true/false
	//float64 0.00
}
*/

// For loop4

/*
package main

import "fmt"

func main() {
	sum := 0
	for i := 0; i < 10; i++ {
		sum += i

	}
	fmt.Println(sum)

	i := 1
	for i <= 3 {
		fmt.Println(i)
		i = i + 1 //i++
	}

	for j := 0; j < 3; j++ {
		fmt.Println(j)
	}

	for i := range 3 {
		if i==2 {
			break
		}
		fmt.Println("range", i)
	}

	for {
		fmt.Println("loop")
		break
	}

	for n := range 6 {
		if n%2 == 0 {
			continue
		}
		
		fmt.Println(n)
	}

	foo := []string{"a","b","c"}
	for i, value := range fo {
		fmt.Printf("%s at %d \n", value , i) //a at 0
		//a at 0
		//b at 1
		//c at 2
	}

}
*/

// str

/*
package main

import "fmt"

func main() {
	book := "Y my room"

	fmt.Println(len(book))
	fmt.Printf("book[0] = %v , type = %T" , book[0], book[0]) //  book[0] = 86 , type = uint8

	// book[0] = 116  // error (string are immutable)

	//Slice (start , end )

	fmt.println(book[4 : 11])
	fmt.println(book[4 :])
	fmt.println(book[: 11])

	// MULTY
	pome := `
	i in my room
	my firend in out
	`
	fmt.println(pome)
}
*/

//range

/*
package main

import "fmt"

func main() {

	//range in array

	nums := []int{1, 5, 3}
	sum := 0
	for num := range nums {
		sum += num
	}
	fmt.Println("sum : ", sum)

	for i, num := range nums {

		fmt.Println("index :", i, "num :", num)

	}

	//Range in maps(object)

	kvs := map[string]string{"a": "apple", "b": "benana"}

	for k, v := range kvs {
		fmt.Printf("%s -> %s\n", k, v)
	}
	for k := range kvs {
		fmt.Println("key :", k)
	}
	for i, c := range "go" {
		fmt.Println(i, c)
	}
}

*/

//if & switch

/*

package main

import (
	"fmt"
	"time"
)

func main() {
	// fraction 
	if num := 9; num < 0 {
		fmt.Println(num, "is negative")
	} else if num < 10 {
		fmt.Println(num, "has 1 digit")
	} else {
		fmt.Println(num, "has multiple digits")
	}

	x := true
	s := "Japan"

	// or = ||
	if s == "Jpn" || x {
		fmt.Println(s)

	// and = &&
	}
	if s == "Jpn" && x {
		fmt.Println(s)
	}

	// switch

	today := time.Now()
	fmt.Println(today)

	switch today.Day() {
	case 5, 7, 12:
		fmt.Println("Today is clean house day")
	case 15:
		fmt.Println("Today is 15th")
	case 31 :
		fmt.Println("Today is 31th")
		fallthrough
	default:
		fmt.Println("have a good day")
	}
}

*/

//function

/*
package main

import "fmt"

func plus(a int, b int) int {
	return a + b
}
func plusPlus(a int, b int, c int) int {
	return a + b + c
}

func rectangle(l int, b int) (area int, parameter int) {
	parameter = 2 * (l + b)
	area = l * b
	return // Return statement without specify variable name
}

func main() {

	res := plus(1, 2)
	fmt.Println("1+2 =", res)
	res = plusPlus(1, 2, 3)
	fmt.Println("1+2+3 =", res)

	var a, p int
	a, p = rectangle(20, 30)
	fmt.Println("Area:", a)
	fmt.Println("Parameter:", p)

	func(l int, b int) {
		fmt.Println(l * b)
	}(20, 30)
}
*/

// packages

/*
package main

import (
	"fmt"
	"math"
)

func main() {
	var x, y int = 3, 4
	var f float64 = math.Sqrt(float64(x*x + y*y))
	var z uint = uint(f)
	fmt.Println(x, y, z)
}
*/

//change type

/*
package main

import (
	"fmt"
	"math"
	"strconv"
)

func main() {
	var x, y int = 3, 4
	var f float64 = math.Sqrt(float64(x*x + y*y))
	// math.Sqrt just run whit float numbers
	var z uint = uint(f)
	fmt.Println(x, y, z)

	//int to string

	var s string = "42"
	v, _ := strconv.Atoi(s) // convert string to int
	fmt.Println(v)          // 42
	var i int = 42
	str := strconv.Itoa(i) // convert int to string
	fmt.Println(str)       // 42

	// int to float

	float := 12.34
	int := int(float)
	fmt.Println(int) // 12
	ii := 34
	ff := float64(ii)
	fmt.Println(ff) //34

	//strin to byte

	sss := "Hello World"
	b := []byte(sss) // convert ty bytes
	fmt.Println(b)   // [72 101 108 108 111 32 87 111 114 108 100]
	ss := string(b)  // convert to string
	fmt.Println(ss)  // Hello World

	//Auto retype on split

	a := 6 / 3          // both are int, a is int
	fff := 6.3 / 3      // float and int, f is float
	fmt.Println(a, fff) // 2 2.1

	//Determine the data type

	name := "Ali"
	age := 25
	height := 1.75
	g := 0.867 + 0.5i

	fmt.Printf("The type of name is %T\n", name)     //The type of name is string
	fmt.Printf("The type of age is %T\n", age)       //The type of age is int
	fmt.Printf("The type of height is %T\n", height) //The type of height is float64
	fmt.Printf("The type of height is %T\n", g)      //The type of height is complex128

}
*/

//array

/*
package main

import (
	"fmt"
)

func main() {
	grade3 := [3]int{98, 56, 23}
	grades := [...]int{56, 87, 94, 54, 79}
	students := [2]string{"alex", "adam"}

	fmt.Printf("grades : %v \n", grade3)
	fmt.Printf("grades : %v \n", grades)
	fmt.Printf("students : %v \n", students)
	fmt.Printf("student #1 : %v \n", students[1])
	fmt.Printf("number of student: %v \n", len(students))

	var Matrix [3][3]int = [3][3]int{[3]int{1, 0, 0}, [3]int{0, 1, 0}, [3]int{0, 0, 1}}
	fmt.Println(Matrix)

	for i := 0; i < len(Matrix); i++ {
		fmt.Println(Matrix[i])
	}

	//address

	a := [...]int{1, 2, 3}
	b := a
	b[1] = 10
	fmt.Println(a)
	fmt.Println(b)
	c := [...]int{1, 2, 3}
	d := &c
	d[1] = 10
	fmt.Println(c)
	fmt.Println(d)

	//slice

	aaa := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

	bbb := aaa[:]
	ccc := aaa[3:]
	ddd := aaa[:6]
	eee := aaa[3:6]

	fmt.Println(aaa, "\n", bbb, "\n", ccc, "\n", ddd, "\n", eee)

	//make

	arr := make([]int, 3)
	fmt.Println(arr) //[0,0,0]
	fmt.Println(len(arr))
	fmt.Println(cap(arr))

	// append
	arr = append(arr, 1)
	fmt.Println(arr)
	fmt.Println(len(arr))
	fmt.Println(cap(arr))

	
}

*/

//maps

/*
package main

import "fmt"

type Vertex struct {
	Lat, Long float64
}

func main() {

	var timeZone = map[string]int{
		"UTC": 0 * 60 * 60,
		"CST": -6 * 60 * 60,
		"MST": -7 * 60 * 60,
		"PST": -8 * 60 * 60,
	}
	fmt.Println(timeZone)
	timeZone["EST"] = -5 * 60 * 60 //append key&value
	delete(timeZone, "PST")        //delete key&value
	fmt.Println(timeZone)

	//check key&value

	var a = map[string]string{"brand": "Ford", "model": "Mustang", "year": "1964", "day": ""}

	val1, ok1 := a["brand"] // Checking for existing key and its value
	val2, ok2 := a["color"] // Checking for non-existing key and its value
	val3, ok3 := a["day"]   // Checking for existing key and its value
	_, ok4 := a["model"]    // Only checking for existing key and not its value

	fmt.Println(val1, ok1)
	fmt.Println(val2, ok2)
	fmt.Println(val3, ok3)
	fmt.Println(ok4)

	offset := timeZone["EST"]
	fmt.Println(offset)

	//struct
	var m = make(map[string]Vertex)
	m["Bell Labs"] = Vertex{
		40.68433, -74.39967,
	}
	m["tehran"] = Vertex{
		35.6892, 51.3890,
	}
	fmt.Println(m["Bell Labs"])
	fmt.Println(m["tehran"])

	//make

	//var p *[]int = new([]int)       // allocates slice structure; *p == nil; rarely useful
	//var v  []int = make([]int, 100) // the slice v now refers to a new array of 100 ints

	// Unnecessarily complex:
	//var p *[]int = new([]int)
	//*p = make([]int, 100, 100)

	// Idiomatic:
	//v := make([]int, 100)

*/

//channel

/*

package main
import "fmt"

func main() {
// create channel
number := make(chan int)
message := make(chan string)

// function call with goroutine
go channelData(number, message)

// retrieve channel data
fmt.Println("Channel Data:", <-number)
fmt.Println("Channel Data:", <-message)
}

func channelData(number chan int, message chan string) {

// send data into channel
number <- 15
message <- "Learning Go channel"
}

*/

// error

/*
package main

import (
	"fmt"
	"os"
)

func main() {
	f, err := os.Open("filename.ext")
	if err != nil {
		if os.IsNotExist(err) {
			fmt.Println("The file does not exist")
		} else if os.IsPermission(err) {
			fmt.Println(" The file cannot be accessed " )
		} else {
			fmt.Println("Another error has occurred :", err)
		}
		return
	}
	defer f.Close()
}
*/

//structs

package main

import "fmt"

type User struct {
	Name   string
	Age    int
	Hight  float64
	Status bool
}

func main() {
	persone := User{"alex", 20, 184.4, true}
	fmt.Println(persone)
	fmt.Println(persone.Name)
}
